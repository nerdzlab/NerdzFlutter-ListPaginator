// Mocks generated by Mockito 5.4.4 from annotations
// in list_paginator/test/cursor_pagination_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/widgets.dart' as _i2;
import 'package:list_paginator_nerdzlab/list_paginator_nerdzlab.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScrollController_0 extends _i1.SmartFake
    implements _i2.ScrollController {
  _FakeScrollController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCursorPaginationBase_1<M> extends _i1.SmartFake
    implements _i3.CursorPaginationBase<M> {
  _FakeCursorPaginationBase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCursorPagination_2 extends _i1.SmartFake
    implements _i3.CursorPagination {
  _FakeCursorPagination_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CursorPaginationObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockCursorPaginationObserver extends _i1.Mock
    implements
        _i3.CursorPaginationObserver<int, _i3.CursorPaginationBase<int>> {
  @override
  _i2.ScrollController get scrollController => (super.noSuchMethod(
        Invocation.getter(#scrollController),
        returnValue: _FakeScrollController_0(
          this,
          Invocation.getter(#scrollController),
        ),
        returnValueForMissingStub: _FakeScrollController_0(
          this,
          Invocation.getter(#scrollController),
        ),
      ) as _i2.ScrollController);

  @override
  _i3.CursorPaginationRequest<int> get onFetchPageData => (super.noSuchMethod(
        Invocation.getter(#onFetchPageData),
        returnValue: (String cursor) =>
            _i4.Future<_i3.CursorPaginationBase<int>>.value(
                _FakeCursorPaginationBase_1<int>(
          this,
          Invocation.getter(#onFetchPageData),
        )),
        returnValueForMissingStub: (String cursor) =>
            _i4.Future<_i3.CursorPaginationBase<int>>.value(
                _FakeCursorPaginationBase_1<int>(
          this,
          Invocation.getter(#onFetchPageData),
        )),
      ) as _i3.CursorPaginationRequest<int>);

  @override
  _i3.TypeCallback<int> get getObserverItems => (super.noSuchMethod(
        Invocation.getter(#getObserverItems),
        returnValue: (List<int> items) {},
        returnValueForMissingStub: (List<int> items) {},
      ) as _i3.TypeCallback<int>);

  @override
  bool get useScrollNotifications => (super.noSuchMethod(
        Invocation.getter(#useScrollNotifications),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get needToClearElementsIfFirstPage => (super.noSuchMethod(
        Invocation.getter(#needToClearElementsIfFirstPage),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get initialCursor => (super.noSuchMethod(
        Invocation.getter(#initialCursor),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#initialCursor),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#initialCursor),
        ),
      ) as String);

  @override
  double get scrollThreshold => (super.noSuchMethod(
        Invocation.getter(#scrollThreshold),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  List<int> get elements => (super.noSuchMethod(
        Invocation.getter(#elements),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  String get nextCursor => (super.noSuchMethod(
        Invocation.getter(#nextCursor),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#nextCursor),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#nextCursor),
        ),
      ) as String);

  @override
  bool get hasMorePages => (super.noSuchMethod(
        Invocation.getter(#hasMorePages),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasPreviousPages => (super.noSuchMethod(
        Invocation.getter(#hasPreviousPages),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic handleScrollNotification(_i2.ScrollNotification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #handleScrollNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetPagination({bool? clearElementsList = false}) => super.noSuchMethod(
        Invocation.method(
          #resetPagination,
          [],
          {#clearElementsList: clearElementsList},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CursorPaginationBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCursorPaginationBase extends _i1.Mock
    implements _i3.CursorPaginationBase<int> {
  @override
  _i3.CursorPagination get pagination => (super.noSuchMethod(
        Invocation.getter(#pagination),
        returnValue: _FakeCursorPagination_2(
          this,
          Invocation.getter(#pagination),
        ),
        returnValueForMissingStub: _FakeCursorPagination_2(
          this,
          Invocation.getter(#pagination),
        ),
      ) as _i3.CursorPagination);

  @override
  List<int> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
}
